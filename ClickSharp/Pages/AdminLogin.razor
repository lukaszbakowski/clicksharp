@attribute [Route(AppUrls.AdminLogin)]
@using ClickSharp.Models.Forms
@using System.Collections.Generic
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@layout LoginLayout
@inject AuthenticationStateProvider customStateProvider
@inject NavigationManager UriHelper
@inject ClickSharpContext context
@inject ClientContext client
@inject IJSRuntime jsRuntime



<PageTitle>Login</PageTitle>


@if (_loadable == null)
{
    <div class="spinner-grow" role="status">
        <span class="sr-only">&nbsp;</span>&nbsp;<span class="sr-only">&nbsp;</span>&nbsp;<span class="sr-only">&nbsp;</span>
    </div>
}
else if (_loadable == true)
{
    @if (_loginResult != null)
    {
        @_loginResult
    }
@*    @if (client != null)
    {
        <p>
            your IP:
            @if(client.ClientIpAddr != null)
            {
                @client.ClientIpAddr
            }
        </p>
    }*@

    @if (_loginModel != null)
    {
        <div class="form-outline mb-4">
            <input type="text" id="emailForm" class="form-control form-control-lg" @bind="_loginModel.Email" />
            <label class="form-label" for="emailForm">Login</label>
        </div>
        <div class="form-outline mb-4">
            <input type="password" id="passwordForm" class="form-control form-control-lg" @bind="_loginModel.Password" />
            <label class="form-label" for="passwordForm">Password</label>
        </div>
        <div class="btn btn-primary btn-lg btn-block" @onclick=HandleValidSubmit>Sign In</div>
        <div class="d-flex justify-content-around align-items-center mb-4">
            @*<a href="#!">Forgot password?</a>*@
        </div>
    }
}
else
{
    <p>you are not abble to login any longer, please try again later</p>
}

@code {
    private LoginForm _loginModel = new LoginForm();
    private string _loginResult = string.Empty;
    private bool? _loadable = null;

    protected override async Task OnInitializedAsync()
    {
        //var httpClient = new HttpClient();
        await Task.Delay(500);
        await CheckIfIsAllowed();
        if (_loadable == null)
            _loadable = true;
        await base.OnInitializedAsync();
    }


    private async Task CheckIfIsAllowed()
    {
        if (context?.Users != null && client.ClientIpAddr != null)
        {
            ClickSharp.DataLayer.Entities.User? getUser = await context.Users.FirstOrDefaultAsync(x => x.IpAddr == client.ClientIpAddr);
            if (getUser != null)
            {
                var start = getUser.LastAuth;
                if (getUser.Attempts > 4 && start.AddMinutes(15) > DateTime.Now)
                    _loadable = false;
            }
        }
    }


    private async Task HandleValidSubmit()
    {
        int error = 0;
        try
        {
            error--;
            var context = new ValidationContext(_loginModel);
            error--;
            var validationResults = new List<ValidationResult>();
            error--;
            var isValid = Validator.TryValidateObject(_loginModel, context, validationResults, true);
            error--;
            if (!isValid)
                throw new Exception($"Invalid login or password, error code: {error}");
            error = 1;
        }
        catch (Exception ex)
        {
            _loginResult = $"{ex.Message}";
        }
        finally
        {
            if (error == 1)
            {
                error--;
                if (await ((CustomStateProvider)customStateProvider).Login(_loginModel))
                    UriHelper.NavigateTo(AppUrls.Admin.PL.PanelZarzadzania);
                else
                {
                    _loginResult = $"Invalid login or password, error code: {error}";
                    await CheckIfIsAllowed();
                    //StateHasChanged();
                }
            }
            if (client != null)
                client.Attempts++;

        }

        await Task.CompletedTask;
    }
}
